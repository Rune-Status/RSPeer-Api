// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RSPeer.Persistence;

namespace RSPeer.Api.Migrations
{
    [DbContext(typeof(RsPeerContext))]
    [Migration("20190217014026_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RSPeer.Domain.Entities.BalanceChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AdminUserId")
                        .HasColumnName("adminuserid");

                    b.Property<int>("NewBalance")
                        .HasColumnName("newbalance");

                    b.Property<int>("OldBalance")
                        .HasColumnName("oldbalance");

                    b.Property<int>("OrderId")
                        .HasColumnName("orderid");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<int>("UserId")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("balancechanges");
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("PaymentMethod")
                        .HasColumnName("paymentmethod");

                    b.Property<decimal>("Price")
                        .HasColumnName("price");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnName("sku");

                    b.HasKey("Id");

                    b.ToTable("items");
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("IsRefunded")
                        .HasColumnName("isrefunded");

                    b.Property<int>("ItemId")
                        .HasColumnName("itemid");

                    b.Property<string>("PaypalId")
                        .HasColumnName("paypalid");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnName("timestamp");

                    b.Property<decimal>("Total")
                        .HasColumnName("total");

                    b.Property<int>("UserId")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.RunescapeClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Ip")
                        .HasColumnName("ip");

                    b.Property<bool>("IsManuallyClosed")
                        .HasColumnName("ismanuallyclosed");

                    b.Property<DateTimeOffset>("LastUpdate")
                        .HasColumnName("lastupdate");

                    b.Property<string>("MachineName")
                        .HasColumnName("machinename");

                    b.Property<string>("OperatingSystem")
                        .HasColumnName("operatingsystem");

                    b.Property<string>("ProxyIp")
                        .HasColumnName("proxyip");

                    b.Property<string>("Rsn")
                        .HasColumnName("rsn");

                    b.Property<string>("RunescapeEmail")
                        .HasColumnName("runescapeemail");

                    b.Property<string>("ScriptName")
                        .HasColumnName("scriptname");

                    b.Property<Guid>("Tag")
                        .HasColumnName("tag");

                    b.Property<int>("UserId")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.ToTable("runescapeclients");
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Category")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("ForumThread")
                        .IsRequired()
                        .HasColumnName("forumthread");

                    b.Property<int?>("Instances")
                        .HasColumnName("instances");

                    b.Property<DateTimeOffset>("LastUpdate")
                        .HasColumnName("lastupdate");

                    b.Property<int?>("MaxUsers")
                        .HasColumnName("maxusers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<int>("TotalUsers")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("totalusers")
                        .HasDefaultValue(0);

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnName("userid");

                    b.Property<decimal>("Version")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("scripts");
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.ScriptContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<byte[]>("Content")
                        .HasColumnName("content");

                    b.Property<int>("ScriptId")
                        .HasColumnName("scriptid");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId")
                        .IsUnique();

                    b.ToTable("scriptcontents");
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Balance")
                        .HasColumnName("balance");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnName("isemailverified");

                    b.Property<string>("Username")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.UserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("groupid");

                    b.Property<int>("UserId")
                        .HasColumnName("userid");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("usergroups");
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.Order", b =>
                {
                    b.HasOne("RSPeer.Domain.Entities.Item", "Item")
                        .WithMany("Orders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.ScriptContent", b =>
                {
                    b.HasOne("RSPeer.Domain.Entities.Script", "Script")
                        .WithOne("ScriptContent")
                        .HasForeignKey("RSPeer.Domain.Entities.ScriptContent", "ScriptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RSPeer.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("RSPeer.Domain.Entities.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RSPeer.Domain.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
